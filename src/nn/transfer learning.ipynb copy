{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras import applications\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras import optimizers\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dropout, Flatten, Dense\n",
    "import os\n",
    "import os, sklearn, pandas, numpy as np, random\n",
    "from sklearn import svm\n",
    "import skimage, skimage.io, skimage.filters\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.callbacks import TensorBoard\n",
    "from sklearn.utils import shuffle\n",
    "import imp\n",
    "import io\n",
    "\n",
    "# from pcanet import PCANet\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/Tristan/Downloads/dog-breed-identification/src'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# set cwd back to default\n",
    "os.chdir('../')\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Dataset :: namedtuple(\n",
      "    ['train' = ['img_name']\n",
      "    , 'test' = ['img_name']\n",
      "    , 'validation' = ['img_name']\n",
      "    , 'labels' = pandas.df('img_name','label')\n",
      "    , 'dict_index_to_label' = dict to convert label_index -> label_name\n",
      "    , 'dict_label_to_index'= dict to convert label_name -> label_index\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "# custom scripts\n",
    "import config # params, constants\n",
    "import data, models # functions that mutate outr data\n",
    "# from utils import utils, plot # custom functions, in local environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import data # src/data.py\n",
    "dataset = data.init_dataset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the amount of classes that will be used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['paper', 'glass', 'plastic', 'metal', 'cardboard']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pick the n classes with the most occuring instances\n",
    "amt = 5\n",
    "classes = data.top_classes(dataset.labels, amt)\n",
    "classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "cardboard\n"
     ]
    }
   ],
   "source": [
    "def extract_topx_classes(classes, train_or_test):\n",
    "    name_list = []\n",
    "    n_per_class = []\n",
    "    tail = '.jpg'\n",
    "    for cls in classes:\n",
    "        print(cls)\n",
    "        names = data.items_with_label(dataset.labels, cls)\n",
    "        if train_or_test == 'train':\n",
    "            train_names = [f for f in names if (f) in dataset.train]\n",
    "        if train_or_test == 'test':\n",
    "            train_names = [f for f in names if (f) in dataset.test]\n",
    "        if train_or_test == 'validation':\n",
    "            train_names = [f for f in names if (f) in dataset.validation]\n",
    "        name_list.append(train_names)\n",
    "        n_per_class.append(len(train_names))\n",
    "\n",
    "    n = min(n_per_class)\n",
    "    # (optional) reduce n to check whether the model can rember its input\n",
    "#     reduced_n = 50\n",
    "#     if n > reduced_n:    n = reduced_n\n",
    "    x = []\n",
    "    for ls in name_list:\n",
    "        for name in ls:\n",
    "            x.append(name)\n",
    "    random.shuffle(x)\n",
    "    return x\n",
    "\n",
    "x_train = extract_topx_classes(classes, 'train')\n",
    "x_test = extract_topx_classes(classes, 'test')\n",
    "x_validation = extract_topx_classes(classes, 'validation')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(x_train[0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and convert images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import decomposition\n",
    "nsamples, nx, ny = x_train[0].shape\n",
    "d2_x_train = x_train.reshape((nsamples,nx*ny))\n",
    "pca = decomposition.PCA(n_components=3)\n",
    "pca.fit(d2_x_train)\n",
    "X = pca.transform(d2_x_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('extract all data:', 1940)\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "metal\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "glass\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "paper\n",
      "cardboard\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "cardboard\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "plastic\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "glass\n",
      "cardboard\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "glass\n",
      "glass\n",
      "paper\n",
      "metal\n",
      "cardboard\n",
      "cardboard\n",
      "plastic\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "plastic\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "metal\n",
      "metal\n",
      "glass\n",
      "paper\n",
      "glass\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "plastic\n",
      "paper\n",
      "paper\n",
      "paper\n",
      "metal\n",
      "plastic\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "metal\n",
      "paper\n",
      "glass\n",
      "paper\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "plastic\n",
      "cardboard\n",
      "glass\n",
      "cardboard\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "metal\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "cardboard\n",
      "paper\n",
      "metal\n",
      "paper\n",
      "paper\n",
      "plastic\n",
      "glass\n",
      "cardboard\n",
      "glass\n",
      "glass\n",
      "plastic\n",
      "cardboard\n"
     ]
    }
   ],
   "source": [
    "x_train, y_train, n = data.extract_all(dataset, x_train)\n",
    "# y_test = y_train\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "sklearn_pca = PCA(n_components=3)\n",
    "Y_sklearn = sklearn_pca.fit_transform(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Y_sklearn[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'module' object has no attribute 'imread'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-d6ab9120b8e2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0max1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0max2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0max3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/Users/Tristan/Downloads/dog-breed-identification/datasets/test/cardboard66.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msklearn_pca\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'n_components'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msklearn_pca\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomponents_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'module' object has no attribute 'imread'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1062e5d10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1,ax2,ax3) = plt.subplots(3, figsize=(40, 20))\n",
    "\n",
    "ax = [ax1,ax2,ax3]\n",
    "\n",
    "m,n = io.imread('/Users/Tristan/Downloads/dog-breed-identification/datasets/test/cardboard66.jpg').shape[0:2]  \n",
    "for i in range(0,sklearn_pca.get_params()['n_components']):\n",
    "    ax[i].imshow(sklearn_pca.components_[i,:].reshape(m,n))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test, y_test, n = data.extract_all(dataset, x_test, dirname='test/' )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Validation data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_validation, y_validation, n  = data.extract_all(dataset, x_validation, dirname='validation/')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convert labels and determine input and output shape for model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'io' from '/anaconda2/lib/python2.7/io.pyc'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imp.reload(io)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# y_train, y_test, y_validation = data.labels_to_vectors(dataset, y_train, y_test, y_validation)\n",
    "y_train = data.one_hot(y_train)\n",
    "y_test = data.one_hot(y_test)\n",
    "y_validation = data.one_hot(y_validation)\n",
    "input_shape = x_train.shape[1:] # = shape of an individual image (matrix)\n",
    "output_length = (y_train[0]).shape[0] # = length of an individual label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(y_train)\n",
    "print(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initiate VG16 network and add extra layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Model \n",
    "\n",
    "def get_model(learn_rate=0.0001, batches=10, dropout=0.10):\n",
    "    # build the VGG16 network\n",
    "    model = applications.VGG16(weights='imagenet', include_top=False, input_shape = input_shape )\n",
    "    print('Model loaded.')\n",
    "\n",
    "    # build a classifier model to put on top of the convolutional model\n",
    "    # top_model = Sequential()\n",
    "    # top_model.add(Flatten(input_shape=model.output_shape[1:]))\n",
    "    # top_model.add(Dense(256, activation='relu'))\n",
    "    # top_model.add(Dropout(0.5))\n",
    "    # top_model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "    for layer in model.layers:\n",
    "        layer.trainable = False\n",
    "\n",
    "    #Adding custom Layers \n",
    "    x = model.output\n",
    "    x = Flatten()(x)\n",
    "    x = (Dense(4096, activation='relu'))(x) #128\n",
    "    x = (Dropout(dropout))(x)\n",
    "    x = (Dense(2048, activation='relu'))(x) #128\n",
    "#     x = (Dense(16, activation='relu'))(x)\n",
    "    # softmax output to get probability distribution\n",
    "    predictions = Dense(output_length, activation=\"softmax\")(x)\n",
    "\n",
    "\n",
    "    # creating the final model \n",
    "    model_final = Model(input = model.input, output = predictions)\n",
    "\n",
    "    # Adam, SGD\n",
    "    # sgd = Keras.optimizers.SGD(lr=0.01, clipnorm=1.)\n",
    "    optimizer = optimizers.Adam(lr=learn_rate)\n",
    "\n",
    "    # compile the model \n",
    "    model_final.compile(loss = \"categorical_crossentropy\", optimizer = optimizer, metrics=['accuracy',\n",
    "        'mean_squared_error','categorical_crossentropy','top_k_categorical_accuracy'])\n",
    "    \n",
    "    return model_final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyperparameter selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.grid_search import RandomizedSearchCV\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "import time\n",
    "\n",
    "# fix random seed for reproducibility\n",
    "seed = 7\n",
    "numpy.random.seed(seed)\n",
    "\n",
    "batches = [5, 10, 20]\n",
    "learn_rate = [0.0001, 0.001, 0.01]\n",
    "dropout = [0.1, 0.3, 0.5] # most used values\n",
    "param_grid = dict(learn_rate=learn_rate, batch_size=batches, dropout=dropout)\n",
    "\n",
    "# tune the hyperparameters via a randomized search\n",
    "model = KerasClassifier(build_fn=get_model, verbose=0)\n",
    "grid = RandomizedSearchCV(estimator=model, param_distributions=param_grid)\n",
    "start = time.time()\n",
    "grid.fit(x_validation, y_validation)\n",
    " \n",
    "# evaluate the best randomized searched model on the testing\n",
    "# data\n",
    "print(\"[INFO] randomized search took {:.2f} seconds\".format(\n",
    "    time.time() - start))\n",
    "acc = grid.score(x_validation, y_validation)\n",
    "print(\"[INFO] grid search accuracy: {:.2f}%\".format(acc * 100))\n",
    "print(\"[INFO] randomized search best parameters: {}\".format(\n",
    "    grid.best_params_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initiate the train and test generators with data Augumentation \n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale = 1./255,\n",
    "    horizontal_flip = True,\n",
    "    fill_mode = \"nearest\",\n",
    "    zoom_range = 0.3,\n",
    "    width_shift_range = 0.3,\n",
    "    height_shift_range=0.3,\n",
    "    rotation_range=30)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# n epochs = n iterations over all the training data\n",
    "batch_size = 5\n",
    "epochs = 20"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_final = get_model()\n",
    "\n",
    "train_datagen.fit(x_train)\n",
    "\n",
    "model_final.fit_generator(train_datagen.flow(x_train, y_train, batch_size=batch_size),\n",
    "                    steps_per_epoch=50, epochs=epochs, callbacks=[TensorBoard(log_dir=config.tmp_model_dir)])\n",
    "        \n",
    "model.save(config.dataset_dir + 'models/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Without data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.callbacks import TensorBoard\n",
    "model_final.fit(x_train, y_train, epochs=epochs, batch_size=batch_size,\n",
    "          validation_split=1/6, callbacks=[TensorBoard(log_dir=config.tmp_model_dir)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_final = get_model()\n",
    "model_final.summary()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### running tests\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cvscores = []\n",
    "scores = model.evaluate(x_test, y_test, verbose=0)\n",
    "print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n",
    "cvscores.append(scores[1] * 100)\n",
    "print(\"%.2f%% (+/- %.2f%%)\" % (numpy.mean(cvscores), numpy.std(cvscores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pcanet import PCANet\n",
    "\n",
    "pcanet = PCANet(\n",
    "        image_shape= (512,348),\n",
    "        filter_shape_l1=2, step_shape_l1=1, n_l1_output=4,\n",
    "        filter_shape_l2=2, step_shape_l2=1, n_l2_output=4,\n",
    "        block_shape=2\n",
    "    )\n",
    "pcanet.validate_structure()\n",
    "\n",
    "pcanet.fit(x_train)\n",
    "X_train = pcanet.transform(x_train)\n",
    "X_test = pcanet.transform(x_test)\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, random_state=1234, n_jobs=-1)\n",
    "model.fit(X_train, y_train)\n",
    "y_pred = model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"accuracy: \" + str(accuracy))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
